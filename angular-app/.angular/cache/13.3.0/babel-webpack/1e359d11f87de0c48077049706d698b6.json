{"ast":null,"code":"\"use strict\";\n\nvar async_1 = require('../scheduler/async');\n\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\n\n\nfunction timestamp(scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n\n  return map_1.map(function (value) {\n    return new Timestamp(value, scheduler.now());\n  }); // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexports.timestamp = timestamp;\n\nvar Timestamp = function () {\n  function Timestamp(value, timestamp) {\n    this.value = value;\n    this.timestamp = timestamp;\n  }\n\n  return Timestamp;\n}();\n\nexports.Timestamp = Timestamp;\n;","map":{"version":3,"sources":["/app/node_modules/ng5-slider/node_modules/rxjs/operators/timestamp.js"],"names":["async_1","require","map_1","timestamp","scheduler","async","map","value","Timestamp","now","exports"],"mappings":"AAAA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAmBC,SAAnB,EAA8B;AAC1B,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAGJ,OAAO,CAACK,KAApB;AAA4B;;AACxD,SAAOH,KAAK,CAACI,GAAN,CAAU,UAAUC,KAAV,EAAiB;AAAE,WAAO,IAAIC,SAAJ,CAAcD,KAAd,EAAqBH,SAAS,CAACK,GAAV,EAArB,CAAP;AAA+C,GAA5E,CAAP,CAF0B,CAG1B;AACH;;AACDC,OAAO,CAACP,SAAR,GAAoBA,SAApB;;AACA,IAAIK,SAAS,GAAI,YAAY;AACzB,WAASA,SAAT,CAAmBD,KAAnB,EAA0BJ,SAA1B,EAAqC;AACjC,SAAKI,KAAL,GAAaA,KAAb;AACA,SAAKJ,SAAL,GAAiBA,SAAjB;AACH;;AACD,SAAOK,SAAP;AACH,CANgB,EAAjB;;AAOAE,OAAO,CAACF,SAAR,GAAoBA,SAApB;AACA","sourcesContent":["\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n"]},"metadata":{},"sourceType":"script"}