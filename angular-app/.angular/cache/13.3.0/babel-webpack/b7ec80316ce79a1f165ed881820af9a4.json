{"ast":null,"code":"/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\n\nvar root_1 = require('./root');\n\nvar ImmediateDefinition = function () {\n  function ImmediateDefinition(root) {\n    this.root = root;\n\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false; // Don't get fooled by e.g. browserify environments.\n\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6â€“8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      var ci = function clearImmediate(handle) {\n        delete clearImmediate.instance.tasksByHandle[handle];\n      };\n\n      ci.instance = this;\n      this.clearImmediate = ci;\n    }\n  }\n\n  ImmediateDefinition.prototype.identify = function (o) {\n    return this.root.Object.prototype.toString.call(o);\n  };\n\n  ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n    return this.identify(this.root.process) === '[object process]';\n  };\n\n  ImmediateDefinition.prototype.canUseMessageChannel = function () {\n    return Boolean(this.root.MessageChannel);\n  };\n\n  ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n    var document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  };\n\n  ImmediateDefinition.prototype.canUsePostMessage = function () {\n    var root = this.root; // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n\n    if (root.postMessage && !root.importScripts) {\n      var postMessageIsAsynchronous_1 = true;\n      var oldOnMessage = root.onmessage;\n\n      root.onmessage = function () {\n        postMessageIsAsynchronous_1 = false;\n      };\n\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous_1;\n    }\n\n    return false;\n  }; // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n\n\n  ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var fn = function result() {\n      var _a = result,\n          handler = _a.handler,\n          args = _a.args;\n\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        new Function('' + handler)();\n      }\n    };\n\n    fn.handler = handler;\n    fn.args = args;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  };\n\n  ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n    var fn = function setImmediate() {\n      var instance = setImmediate.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    fn.instance = this;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var root = this.root;\n    var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n\n    var onGlobalMessage = function globalMessageHandler(event) {\n      var instance = globalMessageHandler.instance;\n\n      if (event.source === root && typeof event.data === 'string' && event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    onGlobalMessage.instance = this;\n    root.addEventListener('message', onGlobalMessage, false);\n\n    var fn = function setImmediate() {\n      var _a = setImmediate,\n          messagePrefix = _a.messagePrefix,\n          instance = _a.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    fn.instance = this;\n    fn.messagePrefix = messagePrefix;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.runIfPresent = function (handle) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      var task = this.tasksByHandle[handle];\n\n      if (task) {\n        this.currentlyRunningATask = true;\n\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  };\n\n  ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n    var _this = this;\n\n    var channel = new this.root.MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n\n      _this.runIfPresent(handle);\n    };\n\n    var fn = function setImmediate() {\n      var _a = setImmediate,\n          channel = _a.channel,\n          instance = _a.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    fn.channel = channel;\n    fn.instance = this;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n    var fn = function setImmediate() {\n      var instance = setImmediate.instance;\n      var root = instance.root;\n      var doc = root.document;\n      var html = doc.documentElement;\n      var handle = instance.addFromSetImmediateArguments(arguments); // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\n      var script = doc.createElement('script');\n\n      script.onreadystatechange = function () {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n      return handle;\n    };\n\n    fn.instance = this;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n    var fn = function setImmediate() {\n      var instance = setImmediate.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    fn.instance = this;\n    return fn;\n  };\n\n  return ImmediateDefinition;\n}();\n\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);","map":{"version":3,"sources":["/app/node_modules/ng5-slider/node_modules/rxjs/util/Immediate.js"],"names":["root_1","require","ImmediateDefinition","root","setImmediate","bind","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","prototype","identify","o","Object","toString","call","process","Boolean","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","onmessage","partiallyApplied","handler","args","_i","arguments","length","fn","result","_a","apply","undefined","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","Math","random","onGlobalMessage","globalMessageHandler","event","source","data","indexOf","slice","addEventListener","setTimeout","task","_this","channel","port1","port2","doc","html","documentElement","script","onreadystatechange","removeChild","appendChild","exports","Immediate"],"mappings":"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","sourcesContent":["/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6â€“8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n"]},"metadata":{},"sourceType":"script"}