{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar async_1 = require('../scheduler/async');\n\nvar isDate_1 = require('../util/isDate');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\n\n\nfunction timeoutWith(due, withObservable, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n\n  return function (source) {\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nexports.timeoutWith = timeoutWith;\n\nvar TimeoutWithOperator = function () {\n  function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n    this.waitFor = waitFor;\n    this.absoluteTimeout = absoluteTimeout;\n    this.withObservable = withObservable;\n    this.scheduler = scheduler;\n  }\n\n  TimeoutWithOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n  };\n\n  return TimeoutWithOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar TimeoutWithSubscriber = function (_super) {\n  __extends(TimeoutWithSubscriber, _super);\n\n  function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n    _super.call(this, destination);\n\n    this.absoluteTimeout = absoluteTimeout;\n    this.waitFor = waitFor;\n    this.withObservable = withObservable;\n    this.scheduler = scheduler;\n    this.action = null;\n    this.scheduleTimeout();\n  }\n\n  TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n    var withObservable = subscriber.withObservable;\n\n    subscriber._unsubscribeAndRecycle();\n\n    subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n  };\n\n  TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n    var action = this.action;\n\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = action.schedule(this, this.waitFor);\n    } else {\n      this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n    }\n  };\n\n  TimeoutWithSubscriber.prototype._next = function (value) {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n\n    _super.prototype._next.call(this, value);\n  };\n  /** @deprecated internal use only */\n\n\n  TimeoutWithSubscriber.prototype._unsubscribe = function () {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  };\n\n  return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"sources":["/app/node_modules/ng5-slider/node_modules/rxjs/operators/timeoutWith.js"],"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","async_1","require","isDate_1","OuterSubscriber_1","subscribeToResult_1","timeoutWith","due","withObservable","scheduler","async","source","absoluteTimeout","isDate","waitFor","now","Math","abs","lift","TimeoutWithOperator","exports","call","subscriber","subscribe","TimeoutWithSubscriber","_super","destination","action","scheduleTimeout","dispatchTimeout","_unsubscribeAndRecycle","add","subscribeToResult","schedule","_next","value","_unsubscribe","OuterSubscriber"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated internal use only */ TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n"]},"metadata":{},"sourceType":"script"}