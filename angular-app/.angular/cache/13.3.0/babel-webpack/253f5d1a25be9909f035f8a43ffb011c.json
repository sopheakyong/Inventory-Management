{"ast":null,"code":"\"use strict\";\n\nvar root_1 = require('./util/root');\n\nvar toSubscriber_1 = require('./util/toSubscriber');\n\nvar observable_1 = require('./symbol/observable');\n\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\n\n\nvar Observable = function () {\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  function Observable(subscribe) {\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n\n\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n\n\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var operator = this.operator;\n    var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  };\n\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  };\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n\n\n  Observable.prototype.forEach = function (next, PromiseCtor) {\n    var _this = this;\n\n    if (!PromiseCtor) {\n      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n        PromiseCtor = root_1.root.Rx.config.Promise;\n      } else if (root_1.root.Promise) {\n        PromiseCtor = root_1.root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor(function (resolve, reject) {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  };\n  /** @deprecated internal use only */\n\n\n  Observable.prototype._subscribe = function (subscriber) {\n    return this.source.subscribe(subscriber);\n  };\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n\n\n  Observable.prototype[observable_1.observable] = function () {\n    return this;\n  };\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n\n\n  Observable.prototype.pipe = function () {\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i - 0] = arguments[_i];\n    }\n\n    if (operations.length === 0) {\n      return this;\n    }\n\n    return pipe_1.pipeFromArray(operations)(this);\n  };\n  /* tslint:enable:max-line-length */\n\n\n  Observable.prototype.toPromise = function (PromiseCtor) {\n    var _this = this;\n\n    if (!PromiseCtor) {\n      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n        PromiseCtor = root_1.root.Rx.config.Promise;\n      } else if (root_1.root.Promise) {\n        PromiseCtor = root_1.root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor(function (resolve, reject) {\n      var value;\n\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  }; // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n\n\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n\n  return Observable;\n}();\n\nexports.Observable = Observable;","map":{"version":3,"sources":["/app/node_modules/ng5-slider/node_modules/rxjs/Observable.js"],"names":["root_1","require","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","_isScalar","_subscribe","prototype","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","call","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","root","Rx","config","Promise","Error","resolve","reject","subscription","value","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","create","exports"],"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAApB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,UAAU,GAAI,YAAY;AAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,WAASA,UAAT,CAAoBC,SAApB,EAA+B;AAC3B,SAAKC,SAAL,GAAiB,KAAjB;;AACA,QAAID,SAAJ,EAAe;AACX,WAAKE,UAAL,GAAkBF,SAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACID,EAAAA,UAAU,CAACI,SAAX,CAAqBC,IAArB,GAA4B,UAAUC,QAAV,EAAoB;AAC5C,QAAIC,UAAU,GAAG,IAAIP,UAAJ,EAAjB;AACAO,IAAAA,UAAU,CAACC,MAAX,GAAoB,IAApB;AACAD,IAAAA,UAAU,CAACD,QAAX,GAAsBA,QAAtqBH,SAArB,GAAiC,UAAUQ,cAAV,EAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;AACxE,QAAIL,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIM,IAAI,GAAGf,cAAc,CAACgB,YAAf,CAA4BJ,cAA5B,EAA4CC,KAA5C,EAAmDC,QAAnD,CAAX;;AACA,QAAIL,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACQ,IAAT,CAAcF,IAAd,EAAoB,KAAKJ,MAAzB;AACH,KAFD,MAGK;AACDI,MAAAA,IAAI,CAACG,GAAL,CAAS,KAAKP,MAAL,IAAe,CAACI,IAAI,CAACI,kBAArB,GAA0C,KAAKb,UAAL,CAAgBS,IAAhB,CAA1C,GAAkE,KAAKK,aAAL,CAAmBL,IAAnB,CAA3E;AACH;;AACD,QAAIA,IAAI,CAACI,kBAAT,EAA6B;AACzBJ,MAAAA,IAAI,CAACI,kBAAL,GAA0B,KAA1B;;AACA,UAAIJ,IAAI,CAACM,eAAT,EAA0B;AACtB,cAAMN,IAAI,CAACO,cAAX;AACH;AACJ;;AACD,WAAOP,IAAP;AACH,GAhBD;;AAiBAZ,EAAAA,UAAU,CAACI,SAAX,CAAqBa,aAArB,GAAqC,UAAUL,IAAV,EAAgB;AACjD,QAAI;AACA,aAAO,KAAKT,UAAL,CAAgBS,IAAhB,CAAP;AACH,KAFD,CAGA,OAAOQ,GAAP,EAAY;AACRR,MAAAA,IAAI,CAACM,eAAL,GAAuB,IAAvB;AACAN,MAAAA,IAAI,CAACO,cAAL,GAAsBC,GAAtB;AACAR,MAAAA,IAAI,CAACF,KAAL,CAAWU,GAAX;AACH;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpB,EAAAA,UAAU,CAACI,SAAX,CAAqBiB,OAArB,GAA+B,UAAUC,IAAV,EAAgBC,WAAhB,EAA6B;AACxD,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,CAACD,WAAL,EAAkB;AACd,UAAI5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,IAAkB/B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAjC,IAA2ChC,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAArE,EAA8E;AAC1EL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAApC;AACH,OAFD,MAGK,IAAIjC,MAAM,CAAC8B,IAAP,CAAYG,OAAhB,EAAyB;AAC1BL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYG,OAA1B;AACH;AACJ;;AACD,QAAI,CAACL,WAAL,EAAkB;AACd,YAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,WAAO,IAAIN,WAAJ,CAAgB,UAAUO,OAAV,EAAmBC,MAAnB,EAA2B;AAC9C;AACA;AACA,UAAIC,YAAJ;AACAA,MAAAA,YAAY,GAAGR,KAAK,CAACvB,SAAN,CAAgB,UAAUgC,KAAV,EAAiB;AAC5C,YAAID,YAAJ,EAAkB;AACd;AACA;AACA;AACA;AACA,cAAI;AACAV,YAAAA,IAAI,CAACW,KAAD,CAAJ;AACH,WAFD,CAGA,OAAOb,GAAP,EAAY;AACRW,YAAAA,MAAM,CAACX,GAAD,CAAN;AACAY,YAAAA,YAAY,CAACE,WAAb;AACH;AACJ,SAZD,MAaK;AACD;AACA;AACA;AACA;AACA;AACA;AACAZ,UAAAA,IAAI,CAACW,KAAD,CAAJ;AACH;AACJ,OAvBc,EAuBZF,MAvBY,EAuBJD,OAvBI,CAAf;AAwBH,KA5BM,CAAP;AA6BH,GA1CD;AA2CA;;;AAAqC9B,EAAAA,UAAU,CAACI,SAAX,CAAqBD,UAArB,GAAkC,UAAUgC,UAAV,EAAsB;AACzF,WAAO,KAAK3B,MAAL,CAAYP,SAAZ,CAAsBkC,UAAtB,CAAP;AACH,GAFoC;AAGrC;AACJ;AACA;AACA;AACA;;;AACInC,EAAAA,UAAU,CAACI,SAAX,CAAqBN,YAAY,CAACS,UAAlC,IAAgD,YAAY;AACxD,WAAO,IAAP;AACH,GAFD;AAGA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIP,EAAAA,UAAU,CAACI,SAAX,CAAqBgC,IAArB,GAA4B,YAAY;AACpC,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,MAAAA,UAAU,CAACC,EAAE,GAAG,CAAN,CAAV,GAAqBC,SAAS,CAACD,EAAD,CAA9B;AACH;;AACD,QAAID,UAAU,CAACG,MAAX,KAAsB,CAA1B,EAA6B;AACzB,aAAO,IAAP;AACH;;AACD,WAAOzC,MAAM,CAAC0C,aAAP,CAAqBJ,UAArB,EAAiC,IAAjC,CAAP;AACH,GATD;AAUA;;;AACArC,EAAAA,UAAU,CAACI,SAAX,CAAqBsC,SAArB,GAAiC,UAAUnB,WAAV,EAAuB;AACpD,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,CAACD,WAAL,EAAkB;AACd,UAAI5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,IAAkB/B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAjC,IAA2ChC,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAArE,EAA8E;AAC1EL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAApC;AACH,OAFD,MAGK,IAAIjC,MAAM,CAAC8B,IAAP,CAAYG,OAAhB,EAAyB;AAC1BL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYG,OAA1B;AACH;AACJ;;AACD,QAAI,CAACL,WAAL,EAAkB;AACd,YAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,WAAO,IAAIN,WAAJ,CAAgB,UAAUO,OAAV,EAAmBC,MAAnB,EAA2B;AAC9C,UAAIE,KAAJ;;AACAT,MAAAA,KAAK,CAACvB,SAAN,CAAgB,UAAU0C,CAAV,EAAa;AAAE,eAAOV,KAAK,GAAGU,CAAf;AAAmB,OAAlD,EAAoD,UAAUvB,GAAV,EAAe;AAAE,eAAOW,MAAM,CAACX,GAAD,CAAb;AAAqB,OAA1F,EAA4F,YAAY;AAAE,eAAOU,OAAO,CAACG,KAAD,CAAd;AAAwB,OAAlI;AACH,KAHM,CAAP;AAIH,GAjBD,CAnQ0B,CAqR1B;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjC,EAAAA,UAAU,CAAC4C,MAAX,GAAoB,UAAU3C,SAAV,EAAqB;AACrC,WAAO,IAAID,UAAJ,CAAeC,SAAf,CAAP;AACH,GAFD;;AAGA,SAAOD,UAAP;AACH,CAnSiB,EAAlB;;AAoSA6C,OAAO,CAAC7C,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n"]},"metadata":{},"sourceType":"script"}