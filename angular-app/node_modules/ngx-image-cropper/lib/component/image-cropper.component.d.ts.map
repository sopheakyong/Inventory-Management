{"version":3,"file":"image-cropper.component.d.ts","sources":["image-cropper.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser';\nimport { CropperPosition, Dimensions, ImageCroppedEvent, ImageTransform, LoadedImage } from '../interfaces';\nimport { MoveTypes } from '../interfaces/move-start.interface';\nimport { CropService } from '../services/crop.service';\nimport { LoadImageService } from '../services/load-image.service';\nimport { OutputFormat } from '../interfaces/cropper-options.interface';\nimport { CropperPositionService } from '../services/cropper-position.service';\nexport declare class ImageCropperComponent implements OnChanges, OnInit {\n    private cropService;\n    private cropperPositionService;\n    private loadImageService;\n    private sanitizer;\n    private cd;\n    private Hammer;\n    private settings;\n    private setImageMaxSizeRetries;\n    private moveStart;\n    private loadedImage;\n    safeImgDataUrl: SafeUrl | string;\n    safeTransformStyle: SafeStyle | string;\n    marginLeft: SafeStyle | string;\n    maxSize: Dimensions;\n    moveTypes: typeof MoveTypes;\n    imageVisible: boolean;\n    wrapper: ElementRef<HTMLDivElement>;\n    sourceImage: ElementRef<HTMLDivElement>;\n    imageChangedEvent: any;\n    imageURL: string;\n    imageBase64: string;\n    imageFile: File;\n    format: OutputFormat;\n    transform: ImageTransform;\n    maintainAspectRatio: boolean;\n    aspectRatio: number;\n    resizeToWidth: number;\n    resizeToHeight: number;\n    cropperMinWidth: number;\n    cropperMinHeight: number;\n    cropperMaxHeight: number;\n    cropperMaxWidth: number;\n    cropperStaticWidth: number;\n    cropperStaticHeight: number;\n    canvasRotation: number;\n    initialStepSize: number;\n    roundCropper: boolean;\n    onlyScaleDown: boolean;\n    imageQuality: number;\n    autoCrop: boolean;\n    backgroundColor: string;\n    containWithinAspectRatio: boolean;\n    hideResizeSquares: boolean;\n    cropper: CropperPosition;\n    alignImage: 'left' | 'center';\n    disabled: boolean;\n    imageCropped: EventEmitter<ImageCroppedEvent>;\n    startCropImage: EventEmitter<void>;\n    imageLoaded: EventEmitter<LoadedImage>;\n    cropperReady: EventEmitter<Dimensions>;\n    loadImageFailed: EventEmitter<void>;\n    constructor(cropService: CropService, cropperPositionService: CropperPositionService, loadImageService: LoadImageService, sanitizer: DomSanitizer, cd: ChangeDetectorRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    private onChangesUpdateSettings;\n    private onChangesInputImage;\n    private isValidImageChangedEvent;\n    private setCssTransform;\n    ngOnInit(): void;\n    private reset;\n    private loadImageFile;\n    private loadBase64Image;\n    private loadImageFromURL;\n    private setLoadedImage;\n    private loadImageError;\n    imageLoadedInView(): void;\n    private checkImageMaxSizeRecursively;\n    private sourceImageLoaded;\n    onResize(): void;\n    private activatePinchGesture;\n    private resizeCropperPosition;\n    resetCropperPosition(): void;\n    keyboardAccess(event: any): void;\n    private changeKeyboardStepSize;\n    private keyboardMoveCropper;\n    startMove(event: any, moveType: MoveTypes, position?: string | null): void;\n    startPinch(event: any): void;\n    moveImg(event: any): void;\n    onPinch(event: any): void;\n    private setMaxSize;\n    private setCropperScaledMinSize;\n    private setCropperScaledMinWidth;\n    private setCropperScaledMinHeight;\n    private setCropperScaledMaxSize;\n    private checkCropperPosition;\n    moveStop(): void;\n    pinchStop(): void;\n    private doAutoCrop;\n    crop(): ImageCroppedEvent | null;\n}\n"]}