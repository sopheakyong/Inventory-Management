{"version":3,"file":"chartist.component.d.ts","sources":["chartist.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport * as Chartist from 'chartist';\n/**\n * Possible chart types\n */\nexport declare type ChartType = 'Pie' | 'Bar' | 'Line';\nexport declare type ChartInterfaces = Chartist.IChartistPieChart | Chartist.IChartistBarChart | Chartist.IChartistLineChart;\nexport declare type ChartOptions = Chartist.IBarChartOptions | Chartist.ILineChartOptions | Chartist.IPieChartOptions;\nexport declare type ResponsiveOptionTuple = Chartist.IResponsiveOptionTuple<ChartOptions>;\nexport declare type ResponsiveOptions = ResponsiveOptionTuple[];\n/**\n * Represents chart events.\n */\nexport interface ChartEvent {\n    [eventName: string]: (data: any) => void;\n}\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [type]=\"type\"\n   [data]=\"data\"\n   [options]=\"options\"\n   [responsiveOptions]=\"responsiveOptions\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\nexport declare class ChartistComponent implements OnInit, OnChanges, OnDestroy {\n    private elementRef;\n    /**\n     * The data object that needs to consist of a labels and a series array.\n     */\n    data: Chartist.IChartistData;\n    /**\n     * Chartist chart type.\n     */\n    type: ChartType;\n    /**\n     * The options object which overrides the default options.\n     */\n    options: Chartist.IChartOptions;\n    /**\n     * An array of responsive option arrays which are a media query and options object pair: [[mediaQueryString, optionsObject],[more...]]\n     */\n    responsiveOptions: ResponsiveOptions;\n    /**\n     * Events object where keys are Chartist event names and values are event handler functions.\n     *\n     * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.\n     *\n     * Event handler function will receive a data argument which contains event data.\n     */\n    events: ChartEvent;\n    /**\n     * Event emitted after Chartist chart has been initialized.\n     *\n     * Event handler function will receive chart instance argument.\n     */\n    initialized: EventEmitter<ChartInterfaces>;\n    /** @ignore */\n    private chart;\n    /** @ignore */\n    constructor(elementRef: ElementRef);\n    /** @ignore */\n    ngOnInit(): void;\n    /** @ignore */\n    ngOnChanges(changes: SimpleChanges): void;\n    /** @ignore */\n    ngOnDestroy(): void;\n    /** @ignore */\n    private renderChart;\n    /** @ignore */\n    private update;\n    /** @ignore */\n    private bindEvents;\n}\n"]}