{"version":3,"file":"ngx-youtube-player.service.d.ts","sources":["ngx-youtube-player.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NgZone } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { IPlayerApiScriptOptions, IPlayerOutputs, IPlayerSize } from './models';\nexport declare function win(): Window & typeof globalThis;\nexport declare function YouTubeRef(): typeof YT;\nexport declare function YouTubePlayerRef(): typeof YT.Player;\nexport declare const defaultSizes: {\n    height: number;\n    width: number;\n};\nexport declare class YoutubePlayerService {\n    private zone;\n    api: ReplaySubject<any>;\n    private ytApiLoaded;\n    constructor(zone: NgZone);\n    loadPlayerApi(options: IPlayerApiScriptOptions): void;\n    setupPlayer(elementId: string, outputs: IPlayerOutputs, sizes: IPlayerSize, videoId: string, playerVars: YT.PlayerVars): void;\n    play(player: YT.Player): void;\n    pause(player: YT.Player): void;\n    playVideo(media: any, player: YT.Player): void;\n    isPlaying(player: YT.Player): boolean;\n    createPlayer(elementId: string, outputs: IPlayerOutputs, sizes: IPlayerSize, videoId?: string, playerVars?: YT.PlayerVars): YT.Player;\n    toggleFullScreen(player: YT.Player, isFullScreen: boolean | null | undefined): void;\n    generateUniqueId(): string;\n    private createApi;\n}\n"]}