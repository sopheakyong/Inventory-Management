import { ElementRef } from '@angular/core';
/** Default values for Component Input */
export const DEFAULTS = {
    target: null,
    action: 'click',
    duration: 650,
    easing: 'easeInOutQuad',
    offset: 0,
    offsetMap: new Map()
};
const ɵ0 = (time) => {
    return time * time;
}, ɵ1 = (time) => {
    return time * (2 - time);
}, ɵ2 = (time) => {
    return time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time;
}, ɵ3 = (time) => {
    return time * time * time;
}, ɵ4 = (time) => {
    return (--time) * time * time + 1;
}, ɵ5 = (time) => {
    return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;
}, ɵ6 = (time) => {
    return time * time * time * time;
}, ɵ7 = (time) => {
    return 1 - (--time) * time * time * time;
}, ɵ8 = (time) => {
    return time < 0.5 ? 8 * time * time * time * time : 1 - 8 * (--time) * time * time * time;
}, ɵ9 = (time) => {
    return time * time * time * time * time;
}, ɵ10 = (time) => {
    return 1 + (--time) * time * time * time * time;
}, ɵ11 = (time) => {
    return time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * (--time) * time * time * time * time;
}, ɵ12 = (time) => {
    return Math.pow(2, -10 * time) * Math.sin((time - 1 / 4) * (2 * Math.PI) / 1) + 1;
};
/** Easing Colleciton */
export const EASING = {
    easeInQuad: ɵ0,
    easeOutQuad: ɵ1,
    easeInOutQuad: ɵ2,
    easeInCubic: ɵ3,
    easeOutCubic: ɵ4,
    easeInOutCubic: ɵ5,
    easeInQuart: ɵ6,
    easeOutQuart: ɵ7,
    easeInOutQuart: ɵ8,
    easeInQuint: ɵ9,
    easeOutQuint: ɵ10,
    easeInOutQuint: ɵ11,
    easeOutElastic: ɵ12
};
/**
 * Set of allowed events as triggers
 * for the Animation to start.
 */
export const EVENTS = [
    'click',
    'mouseenter',
    'mouseover',
    'mousedown',
    'mouseup',
    'dblclick',
    'contextmenu',
    'wheel',
    'mouseleave',
    'mouseout'
];
/**
 * Strip hash (#) from value.
 *
 * @param value 				The given string value
 * @returns 					The stripped string value
 */
export function stripHash(value) {
    return value.substring(0, 1) === '#' ? value.substring(1) : value;
}
/**
 * Test if a given value is a string.
 *
 * @param value 					The given value
 * @returns 						Whether the given value is a string
 */
export function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
/**
 * Test if a given Element is the Window.
 *
 * @param container 				The given Element
 * @returns 						Whether the given Element is Window
 */
export function isWindow(container) {
    return container === window;
}
/**
 * Test if a given value is of type ElementRef.
 *
 * @param value 					The given value
 * @returns               Whether the given value is a number
 */
export function isElementRef(value) {
    return value instanceof ElementRef;
}
/**
 * Whether or not the given value is a Native Element.
 *
 * @param value           The given value
 * @returns               Whether or not the value is a Native Element
 */
export function isNativeElement(value) {
    return value instanceof HTMLElement;
}
/**
 * Test if a given value is type number.
 *
 * @param value 					The given value
 * @returns 						Whether the given value is a number
 */
export function isNumber(value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvLWhlbHBlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmlja3ktbGVuYWVycy9uZ3gtc2Nyb2xsLXRvLyIsInNvdXJjZXMiOlsibGliL3Njcm9sbC10by1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLM0MseUNBQXlDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBaUM7SUFDcEQsTUFBTSxFQUFFLElBQUk7SUFDWixNQUFNLEVBQUUsT0FBTztJQUNmLFFBQVEsRUFBRSxHQUFHO0lBQ2IsTUFBTSxFQUFFLGVBQWU7SUFDdkIsTUFBTSxFQUFFLENBQUM7SUFDVCxTQUFTLEVBQUUsSUFBSSxHQUFHLEVBQUU7Q0FDckIsQ0FBQztXQUlZLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDM0IsT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLENBQUMsT0FDWSxDQUFDLElBQVksRUFBRSxFQUFFO0lBQzVCLE9BQU8sSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUMsT0FDYyxDQUFDLElBQVksRUFBRSxFQUFFO0lBQzlCLE9BQU8sSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDbkUsQ0FBQyxPQUNZLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDNUIsT0FBTyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUM1QixDQUFDLE9BQ2EsQ0FBQyxJQUFZLEVBQUUsRUFBRTtJQUM3QixPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNwQyxDQUFDLE9B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QUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3BFLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUMsS0FBVTtJQUNqQyxPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLFlBQVksTUFBTSxDQUFDO0FBQzlELENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUMsU0FBYztJQUNyQyxPQUFPLFNBQVMsS0FBSyxNQUFNLENBQUM7QUFDOUIsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFVO0lBQ3JDLE9BQU8sS0FBSyxZQUFZLFVBQVUsQ0FBQztBQUNyQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQVU7SUFDeEMsT0FBTyxLQUFLLFlBQVksV0FBVyxDQUFDO0FBQ3RDLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUMsS0FBVTtJQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTY3JvbGxUb0FuaW1hdGlvbkVhc2luZ0NvbGxlY3Rpb24gfSBmcm9tICcuL3Njcm9sbC10by1lYXNpbmcuaW50ZXJmYWNlJztcbmltcG9ydCB7IFNjcm9sbFRvRGVmYXVsdENvbmZpZ09wdGlvbnMgfSBmcm9tICcuL3Njcm9sbC10by1jb25maWcuaW50ZXJmYWNlJztcblxuLyoqIERlZmF1bHQgdmFsdWVzIGZvciBDb21wb25lbnQgSW5wdXQgKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUUzogU2Nyb2xsVG9EZWZhdWx0Q29uZmlnT3B0aW9ucyA9IHtcbiAgdGFyZ2V0OiBudWxsLFxuICBhY3Rpb246ICdjbGljaycsXG4gIGR1cmF0aW9uOiA2NTAsXG4gIGVhc2luZzogJ2Vhc2VJbk91dFF1YWQnLFxuICBvZmZzZXQ6IDAsXG4gIG9mZnNldE1hcDogbmV3IE1hcCgpXG59O1xuXG4vKiogRWFzaW5nIENvbGxlY2l0b24gKi9cbmV4cG9ydCBjb25zdCBFQVNJTkc6IFNjcm9sbFRvQW5pbWF0aW9uRWFzaW5nQ29sbGVjdGlvbiA9IHtcbiAgZWFzZUluUXVhZDogKHRpbWU6IG51bWJlcikgPT4ge1xuICAgIHJldHVybiB0aW1lICogdGltZTtcbiAgfSxcbiAgZWFzZU91dFF1YWQ6ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gdGltZSAqICgyIC0gdGltZSk7XG4gIH0sXG4gIGVhc2VJbk91dFF1YWQ6ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gdGltZSA8IDAuNSA/IDIgKiB0aW1lICogdGltZSA6IC0xICsgKDQgLSAyICogdGltZSkgKiB0aW1lO1xuICB9LFxuICBlYXNlSW5DdWJpYzogKHRpbWU6IG51bWJlcikgPT4ge1xuICAgIHJldHVybiB0aW1lICogdGltZSAqIHRpbWU7XG4gIH0sXG4gIGVhc2VPdXRDdWJpYzogKHRpbWU6IG51bWJlcikgPT4ge1xuICAgIHJldHVybiAoLS10aW1lKSAqIHRpbWUgKiB0aW1lICsgMTtcbiAgfSxcbiAgZWFzZUluT3V0Q3ViaWM6ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gdGltZSA8IDAuNSA/IDQgKiB0aW1lICogdGltZSAqIHRpbWUgOiAodGltZSAtIDEpICogKDIgKiB0aW1lIC0gMikgKiAoMiAqIHRpbWUgLSAyKSArIDE7XG4gIH0sXG4gIGVhc2VJblF1YXJ0OiAodGltZTogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7XG4gIH0sXG4gIGVhc2VPdXRRdWFydDogKHRpbWU6IG51bWJlcikgPT4ge1xuICAgIHJldHVybiAxIC0gKC0tdGltZSkgKiB0aW1lICogdGltZSAqIHRpbWU7XG4gIH0sXG4gIGVhc2VJbk91dFF1YXJ0OiAodGltZTogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIHRpbWUgPCAwLjUgPyA4ICogdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSA6IDEgLSA4ICogKC0tdGltZSkgKiB0aW1lICogdGltZSAqIHRpbWU7XG4gIH0sXG4gIGVhc2VJblF1aW50OiAodGltZTogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lO1xuICB9LFxuICBlYXNlT3V0UXVpbnQ6ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gMSArICgtLXRpbWUpICogdGltZSAqIHRpbWUgKiB0aW1lICogdGltZTtcbiAgfSxcbiAgZWFzZUluT3V0UXVpbnQ6ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gdGltZSA8IDAuNSA/IDE2ICogdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgOiAxICsgMTYgKiAoLS10aW1lKSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7XG4gIH0sXG4gIGVhc2VPdXRFbGFzdGljOiAodGltZTogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIE1hdGgucG93KDIsIC0xMCAqIHRpbWUpICogTWF0aC5zaW4oKHRpbWUgLSAxIC8gNCkgKiAoMiAqIE1hdGguUEkpIC8gMSkgKyAxO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBvZiBhbGxvd2VkIGV2ZW50cyBhcyB0cmlnZ2Vyc1xuICogZm9yIHRoZSBBbmltYXRpb24gdG8gc3RhcnQuXG4gKi9cbmV4cG9ydCBjb25zdCBFVkVOVFM6IHN0cmluZ1tdID0gW1xuICAnY2xpY2snLFxuICAnbW91c2VlbnRlcicsXG4gICdtb3VzZW92ZXInLFxuICAnbW91c2Vkb3duJyxcbiAgJ21vdXNldXAnLFxuICAnZGJsY2xpY2snLFxuICAnY29udGV4dG1lbnUnLFxuICAnd2hlZWwnLFxuICAnbW91c2VsZWF2ZScsXG4gICdtb3VzZW91dCdcbl07XG5cbi8qKlxuICogU3RyaXAgaGFzaCAoIykgZnJvbSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgXHRcdFx0XHRUaGUgZ2l2ZW4gc3RyaW5nIHZhbHVlXG4gKiBAcmV0dXJucyBcdFx0XHRcdFx0VGhlIHN0cmlwcGVkIHN0cmluZyB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBIYXNoKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIDEpID09PSAnIycgPyB2YWx1ZS5zdWJzdHJpbmcoMSkgOiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBUZXN0IGlmIGEgZ2l2ZW4gdmFsdWUgaXMgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHZhbHVlIFx0XHRcdFx0XHRUaGUgZ2l2ZW4gdmFsdWVcbiAqIEByZXR1cm5zIFx0XHRcdFx0XHRcdFdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZTogYW55KTogdmFsdWUgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbi8qKlxuICogVGVzdCBpZiBhIGdpdmVuIEVsZW1lbnQgaXMgdGhlIFdpbmRvdy5cbiAqXG4gKiBAcGFyYW0gY29udGFpbmVyIFx0XHRcdFx0VGhlIGdpdmVuIEVsZW1lbnRcbiAqIEByZXR1cm5zIFx0XHRcdFx0XHRcdFdoZXRoZXIgdGhlIGdpdmVuIEVsZW1lbnQgaXMgV2luZG93XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1dpbmRvdyhjb250YWluZXI6IGFueSk6IGNvbnRhaW5lciBpcyBXaW5kb3cge1xuICByZXR1cm4gY29udGFpbmVyID09PSB3aW5kb3c7XG59XG5cbi8qKlxuICogVGVzdCBpZiBhIGdpdmVuIHZhbHVlIGlzIG9mIHR5cGUgRWxlbWVudFJlZi5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgXHRcdFx0XHRcdFRoZSBnaXZlbiB2YWx1ZVxuICogQHJldHVybnMgICAgICAgICAgICAgICBXaGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50UmVmKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBFbGVtZW50UmVmIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRWxlbWVudFJlZjtcbn1cblxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBOYXRpdmUgRWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgICAgICAgICAgIFRoZSBnaXZlbiB2YWx1ZVxuICogQHJldHVybnMgICAgICAgICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgdmFsdWUgaXMgYSBOYXRpdmUgRWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOYXRpdmVFbGVtZW50KHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBIVE1MRWxlbWVudCB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG4vKipcbiAqIFRlc3QgaWYgYSBnaXZlbiB2YWx1ZSBpcyB0eXBlIG51bWJlci5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgXHRcdFx0XHRcdFRoZSBnaXZlbiB2YWx1ZVxuICogQHJldHVybnMgXHRcdFx0XHRcdFx0V2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBudW1iZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBudW1iZXIge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSk7XG59XG4iXX0=