{"version":3,"file":"scroll-to.service.d.ts","sources":["scroll-to.service.d.ts"],"names":[],"mappingssourcesContent":["import { ScrollToConfigOptions } from './scroll-to-config.interface';\nimport { Observable } from 'rxjs';\n/**\n * The Scroll To Service handles starting, interrupting\n * and ending the actual Scroll Animation. It provides\n * some utilities to find the proper HTML Element on a\n * given page to setup Event Listeners and calculate\n * distances for the Animation.\n */\nexport declare class ScrollToService {\n    private document;\n    private platformId;\n    /**\n     * The animation that provides the scrolling\n     * to happen smoothly over time. Defining it here\n     * allows for usage of e.g. `start` and `stop`\n     * methods within this Angular Service.\n     */\n    private animation;\n    /**\n     * Interruptive Events allow to scrolling animation\n     * to be interrupted before it is finished. The list\n     * of Interruptive Events represents those.\n     */\n    private interruptiveEvents;\n    /**\n     * Construct and setup required paratemeters.\n     *\n     * @param document         A Reference to the Document\n     * @param platformId       Angular Platform ID\n     */\n    constructor(document: any, platformId: any);\n    /**\n     * Target an Element to scroll to. Notice that the `TimeOut` decorator\n     * ensures the executing to take place in the next Angular lifecycle.\n     * This allows for scrolling to elements that are e.g. initially hidden\n     * by means of `*ngIf`, but ought to be scrolled to eventually.\n     *\n     * @todo type 'any' in Observable should become custom type like 'ScrollToEvent' (base class), see issue comment:\n     *  - https://github.com/nicky-lenaers/ngx-scroll-to/issues/10#issuecomment-317198481\n     *\n     * @param options         Configuration Object\n     * @returns               Observable\n     */\n    scrollTo(options: ScrollToConfigOptions): Observable<any>;\n    /**\n     * Start a new Animation.\n     *\n     * @todo Emit proper events from subscription\n     *\n     * @param options         Configuration Object\n     * @returns               Observable\n     */\n    private start;\n    /**\n     * Subscribe to the events emitted from the Scrolling\n     * Animation. Events might be used for e.g. unsubscribing\n     * once finished.\n     *\n     * @param animation$              The Animation Observable\n     * @param listenerTarget          The Listener Target for events\n     * @param onInterrupt             The handler for Interruptive Events\n     * @returns                       Void\n     */\n    private subscribeToAnimation;\n    /**\n     * Get the container HTML Element in which\n     * the scrolling should happen.\n     *\n     * @param options         The Merged Configuration Object\n     * @param targetNode    the targeted HTMLElement\n     */\n    private getContainer;\n    /**\n     * Add listeners for the Animation Interruptive Events\n     * to the Listener Target.\n     *\n     * @param events            List of events to listen to\n     * @param listenerTarget    Target to attach the listener on\n     * @param handler           Handler for when the listener fires\n     * @returns                 Void\n     */\n    private addInterruptiveEventListeners;\n    /**\n     * Feature-detect support for passive event listeners.\n     *\n     * @returns       Whether or not passive event listeners are supported\n     */\n    private supportPassive;\n    /**\n     * Remove listeners for the Animation Interrupt Event from\n     * the Listener Target. Specifying the correct handler prevents\n     * memory leaks and makes the allocated memory available for\n     * Garbage Collection.\n     *\n     * @param events            List of Interruptive Events to remove\n     * @param listenerTarget    Target to attach the listener on\n     * @param handler           Handler for when the listener fires\n     * @returns                 Void\n     */\n    private removeInterruptiveEventListeners;\n    /**\n     * Find the first scrollable parent Node of a given\n     * Element. The DOM Tree gets searched upwards\n     * to find this first scrollable parent. Parents might\n     * be ignored by CSS styles applied to the HTML Element.\n     *\n     * @param nativeElement     The Element to search the DOM Tree upwards from\n     * @returns                 The first scrollable parent HTML Element\n     */\n    private getFirstScrollableParent;\n    /**\n     * Get the Target Node to scroll to.\n     *\n     * @param id              The given ID of the node, either a string or\n     *                        an element reference\n     * @param allowBodyTag    Indicate whether or not the Document Body is\n     *                        considered a valid Target Node\n     * @returns               The Target Node to scroll to\n     */\n    private getNode;\n    /**\n     * Retrieve the Listener target. This Listener Target is used\n     * to attach Event Listeners on. In case of the target being\n     * the Document Body, we need the actual `window` to listen\n     * for events.\n     *\n     * @param container           The HTML Container element\n     * @returns                   The Listener Target to attach events on\n     */\n    private getListenerTarget;\n    /**\n     * Test if a given HTML Element is the Document Body.\n     *\n     * @param element             The given HTML Element\n     * @returns                   Whether or not the Element is the\n     *                            Document Body Element\n     */\n    private isDocumentBody;\n}\n"]}