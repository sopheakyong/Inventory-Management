import User from '../models/user';

function load(req, res, next, id) {
  User.findById(id)
    .exec()
    .then((user) => {
      req.dbUser = user;
      return next();
    }, (e) => next(e));
}

function get(req, res) {
  return res.json(req.dbUser);
}

function create(req, res, next) {
  User.create({
      username: req.body.username,
      password: req.body.password
    })
    .then((savedUser) => {
      return res.json(savedUser);
    }, (e) => next(e));
}

function update(req, res, next) {
  const user = req.dbUser;
  Object.assign(user, req.body);

  user.save()
    .then((savedUser) => res.sendStatus(204),
      (e) => next(e));
}

function list(req, res, next) {
  const { limit = 50, skip = 0 } = req.query;
  User.find()
    .skip(skip)
    .limit(limit)
    .exec()
    .then((users) => res.json(users),
      (e) => next(e));
}

function remove(req, res, next) {
  const user = req.dbUser;
  user.remove()
    .then(() => res.sendStatus(204),
      (e) => next(e));
}

export default { load, get, create, update, list, remove };


load: we’ll use this controller function for all the requests that contain a userId on the path. This would be for the GET /users/userId, PUT /users/userId and DELETE /users/userId. This will make things easier by loading the user from the database and making it accessible in the request object as req.dbUser.
get: implementation for the GET /users/userId endpoint that returns a specific user’s data as json.
create: implementation for the POST /users endpoint. It creates a new user document in our database by using the request body data sent by the client.
update: implementation for the PUT /users/userId endpoint. It also takes the data sent in the request body and uses it to update an existing user. It returns 204 No Content as recommended in the RFC7231 standard
list: implements the GET /users endpoint. It queries the database to list all the users but limits the results. Since we might have thousands of users in our database, we don’t want to send a huge payload through the network, so we need to paginate the results in a way that API clients can get them by batches (of 50 users in our case).
remove: implements the DELETE /users/userId endpoint and returns 204 No Content when it’s successful.
Notice that in case of errors happening while accessing the data, we simply call the next middleware with the corresponding error as parameter (next(e)). We’ll cover error handling later, so for now just ignore that part.
The Users Route Configuration
Now that we have a controller ready, we can create our route configuration file. So let’s create a users.js file inside the server/routes directory and put the following contents on it:
import express from 'express';
import userCtrl from '../controllers/users';

const router = express.Router();

router.route('/')
  /** GET /api/users - Get list of users */
  .get(userCtrl.list)

  /** POST /api/users - Create new user */
  .post(userCtrl.create);

router.route('/:userId')
  /** GET /api/users/:userId - Get user */
  .get(userCtrl.get)

  /** PUT /api/users/:userId - Update user */
  .put(userCtrl.update)

  /** DELETE /api/users/:userId - Delete user */
  .delete(userCtrl.remove);

/** Load user when API with userId route parameter is hit */
router.param('userId', userCtrl.load);

export default router;
This one looks simple, so here we’re defining two routes: / and /:userId. We’ll mount this two routes under the /users path later, so they will become /users and /users/:userId. Under each of this routes, we define the different verbs supported on that route, and we assign a controller function to each of them. So as an example, let’s take the first one:
router.route('/').get(userCtrl.list
This is telling express, that whenever a request comes to the /users path with the HTTP method GET, the controller function list must be called to handle the request. You can guess the rest of the routes very easily.
There’s one special configuration in the end:
router.param('userId', userCtrl.load)
This tells express that whenever an incoming request has the userId parameter in the path, it should call first the controller function load and then pass to the corresponding handler. So if for example the server gets the request: GET /users/some-user-id-here, the server will first call the userCtrl.load function and after that it will call the userCtrl.get function.
Testing the Endpoints
All set, let’s grab a console and try our set of endpoints. Let’s start by creating a new user with our POST /users endpoint:




// router.route('/')
//   /** GET /api/tasks - Get list of tasks */
//   .get(taskCtrl.list)
//
//   /** POST /api/tasks - Create new task */
//   .post(taskCtrl.create);
//
// router.route('/:taskId')
//   /** GET /api/tasks/:taskId - Get task */
//   .get(taskCtrl.get)
//
//   /** PUT /api/tasks/:taskId - Update task */
//   .put(taskCtrl.update)
//
//   /** DELETE /api/tasks/:taskId - Delete task */
//   .delete(taskCtrl.remove);
//
// /** Load task when API with taskId route parameter is hit */
// router.param('taskId', taskCtrl.load);



// GET /users: will return the list of users in our system
// POST /users: will create a new user in our system
// GET /users/[userId]: will return the user with the given userId
// PUT /users/[userId]: will update the data for the user with the given userId
// DELETE /users/[userId]: will delete the user with the given userId


// router.get("/category/:categoryId", read);
// router.post("/category/create/:userId", requireSignin, isAuth, isAdmin, create);
// router.put("/category/:categoryId/:userId", requireSignin, isAuth, isAdmin, update);
// router.delete("/category/:categoryId/:userId", requireSignin, isAuth, isAdmin, remove);
// router.post("/categories", list);

// router.route('/')
//   /** GET /api/users - Get list of users */
//   .get(userCtrl.list)
//
//   /** POST /api/users - Create new user */
//   .post(userCtrl.create);
//
// router.route('/:userId')
//   /** GET /api/users/:userId - Get user */
//   .get(userCtrl.get)
//
//   /** PUT /api/users/:userId - Update user */
//   .put(userCtrl.update)
//
//   /** DELETE /api/users/:userId - Delete user */
//   .delete(userCtrl.remove);
//
// /** Load user when API with userId route parameter is hit */
// router.param('userId', userCtrl.load);
